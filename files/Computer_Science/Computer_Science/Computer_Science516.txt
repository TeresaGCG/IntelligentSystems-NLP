500 Chapter 7 Large and Fast: Exploiting Memory Hierarchy
The direct-mapped case is easiest. First, let's determine to which cache block
ANSWER
each block address maps:
Block address Cache block
0 (0 modulo 4) '" 0
6 (6 modulo 4) '" 2
8 (S modulo 4) '" 0
Now we can fill in the cache contents after each reference, using a blank entry
to mean that the block is invalid, colored text to show a new entry added to
the cache for the associate reference, and a plain text to show an old entry in
the cache:
Contents of cache blocks after reference
Address of memory
â€¢
block accessed
0 miss Memory(O]
8 miss Memory(8]
0 miss Memory(O]
6 miss Memory[O) Memory[6)
8 miss Memory(8] Memory[6]
The direct-mapped cache generates five misses for the five accesses.
The set-associative cache has two sets (with indices 0 and 1) with two ele 
ments per set. Let's first determine to which set each block address maps:
Block address Cache set
0 (0 modulo 2) '" 0
6 (6 modulo 2) _ 0
8 (8 modulo 2) _ 0
Because we have a choice of which entry in a set to replace on a miss, we need
a replacement rule. Set-associative caches usually replace the least recently
used block within a set; that is, the block that was used furthest in the past is
replaced. (We will discuss replacement rules in more detail shortly.) Using
this replacement rule, the contents of the set-associative cache after each ref 
erence looks like this: