3.2 Signed and Unsigned Numbers 16.
MIPS operands
Name Example Comments
$sO- $s7. StO- St9 , $gp, Fast locations for data. In MIPS, data must be in registers to perform arithmetic. MIPS
32
Sfp, $zero. $s p. $ra, $, t register $ze ro always equals O. Register $at is reserved for the assembler to handle
registers
large constants.
2~ Memory[O], Accessed only by data transfer instructions. MIPS uses byte addresses,so sequential word
memory Memory[4]. ... , addresses differ by 4. Memory holds data structures, such as arrays, and spilled registers,
words Memory[4294967292] such as those saved on procedure calls.
MIPS assembly language
Category Instruction Example Meaning Comments
odd 'dd $sl,$52.$s3 $;1 - $,' + $,3 Three operands
Arithmetic subtract "b $sl.$52.$s3 $;1 $" $,3 Three operands
add immediate addi $sl.$52.100 $;1 $" + 100 + constant
load word 1w $sl, 100{$s2) $;1 - Memory[ $s2 + 100] Word from memory to register
,w
store word $sl, 100{$s2) Memory[ $s2 + 100] $,1 Word from register to memory
load half unsigned 1h' $sl,lOO{$s2) $;1 Memory[ $s2 + 100] Halfword memory to register
Do'"
store half 'h $51.100{ $s2) Memory($52 + 100] _ $;1 Halfword register to memory
transfer
load byte unsigned lb' $sl,100{$s2) $;1 Memory[ $s2 + 100] Byte from memory to register
store byte 'b $sl,100{$s2) Memory($52 + 100) _ $51 Byte from register to memory
,'"
,•
load upper immediate 1ui $sl,100 $;1 - 100 Loads constant in upper 16 bits
ooif "d $sl. $s2.$s3 $;1 $, , $,3 Three reg. operands; bit.tly-bit AND
0' " $sl, $s2.$s3 $;1 $, , I $,3 Three reg. operands; bit.tly-bit OR
, I
00' 0" $s l. $s2.$s3 $;1 ($s2 $s 3 ) Three reg. operands; bit.t>y.tlit NOR
Logical and immediate andi $sl, $s2.100 $;1 $, , 100 Bit.tly-bit AND with constant
or immediate on $sl, $s2.100 $;1 - $, , I 100 Bit.tly-bit OR with constant
«
,11
shift left logical $s l, $s2.10 $;1 $" 10 Shift left by constant
shift right logical ;,1 $sl, $s2.10 $s1 _ $s2» 10 Shift right by constant
branch on equal beq $sl, $s2.25 if {$sl __ $s2}gotoPC+4 + 100 Equal test; pc.,elative branch
branch on not equal boe $s l, $s2.25 if($s l !_ $s2}gotoPC + 4 + 100 Not equal test; PC-relative
set on less than $sl, $s2.$s3 if($s2<$53) $sl_1; Compare less than;
'It
,.
else $s l", O two's complement
Conditional set less than immediate slti $sl, $s2.100 if($s2 < 100) $;1 Compare < constant;
•,.
branch else $s l 0 two's complement
~
<
set less than unsigned sltu $sl. $s2.$s3 if {$s2 $s 3} $;1 Compare less than; unsigned
•
else $sl 0 numbers
~
set less than immediate slt i u $sl, $s2.100 if ( $52 < 100) $;1 1 , Compare < constant;
unsigned else $,1 0 unsigned numbers
~
jump 2500 go to 10000 Jump to target address
J
Uncondi·
jump register $ ra go to $ra For switch, procedure return
JC
tionaljump
jump and link j a1 2500 $ra _ PC + 4; go to 10000 For procedure call
FIGURE 3.1 MIPS architecture revealed thus far. Color indicates portions from this section added to the MIPS architecture revealed in
Chapter 2 (Figure 3.26 on p.1ge 228). MIPS machine language is listed in the MIPS summary reference card in the front of this book.