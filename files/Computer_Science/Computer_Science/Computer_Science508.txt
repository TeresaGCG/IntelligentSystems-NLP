492 Chapter 7 Large and Fast: Exploiting Memory Hierarchy
Measuring and Improving Cache
Performance
In this section, we begin by looking at how to measure and analyze cache perfor 
mance; we then explore two different techniques for improving cache perfor 
mance. One focuses on reducing the miss rate by reducing the probability that
two different memory blocks will contend for the same cache location. The sec 
ond technique reduces the miss penalty by adding an additional level to the hier 
archy. This technique, called multilevel caching, first appeared in high-end
computers selling for over $1 00,000 in 1990; since then it has become common on
desktop computers selling for less than $1000!
CPU time can be divided into the clock cycles that the CPU spends executing
the program and the clock cycles that the CPU spends wa iting for the memory
system. Normally, we assume that the costs of cache accesses that are hits are part
of the normal CPU execution cycles. Thus,
+
CPU time = (CPU execution clock cycles Memory-stall clock cycles)
x Clock cycle time
The memory-stall clock cycles come primarily from cache misses, and we make
that assumption here. We also restrict the discussion to a simplified model of the
memory system. In real processors, the stalls generated by reads and writes can be
quite complex, and accurate performance prediction usually requires very
detailed simulations of the processor and memory system.
Memory-stall clock cycles can be defined as the sum of the stall cycles coming
from reads plus those coming from writes:
Memory-stall clock cycles = Read-stall cycles + Write-stall cycles
The read-stall cycles can be defined in terms of the number of read accesses per
program, the miss penalty in clock cycles for a read, and the read miss rate:
Read-stall cycles = Reads X Read miss rate X Read miss penalty
Program
Writes are more complicated. For a write-through scheme, we have two sources of
stalls: write misses, which usually require that we fetch the block before continu 
ing the write (see the Elaboration on page 484 for more details on dealing with
writes), and write buffer stalls, which occur when the write buffer is full when a
write occurs. Thus, the cycles stalled for writes equals the sum of these two: