3.11 Exercises 231
18
3.21 (15) <§3.4> For More Practice: Relative Performance of Adders
1&
3.22 (15) <§3.4> For More Practice: Relative Performance of Adders
1&
3.23 (30) <§3.4> In More Depth: Booth's Algorithm
II
3.24 (15)(30) <§3.4> For More Practice: Special MIPS Registers
II
3.25 (10 ) <§§3.5, 3.4> In More Depth: The Power PC's Multiply-Add
Instruction
1&
3.26 (20) <§3.5> In More Depth: The Power PC's Multiply-Add Instruction
3.27 <§§3.3, 3.4, 3.5> With x = 0000 0000 0000 0000 0000 0000 010 1 10 II,wo and
y = 0000 0000 0000 0000 0000 0000 0000 11 01two representing two's complement
signed integers, perform , showing all work:
a. x + y
b. x- y
c. x ~ y
d. xly
3.28 (20) <§§3.3, 3.4, 3.5> Perform the same operations as Exercise 3.27, but
with x = 1111 1111 1111 1111 1011 00 11 0101 00 11 and y = 0000 0000 0000 0000
0000 00 10 110 1 0111 t\o,"o.
3.29 (30) <§3.5> The division algorithm in Figure 3.11 on page 185 is called
restoring division, since each time the result of subtracting the divisor from the div 
idend is negative you must add the divisor back into the dividend to restore the
o riginal value. Recall that shift left is the same as multiplying by 2. Let's look at the
value of the left half of the Remainder again, starting with step 3b of the divide
algorithm and then going to step 2:
+
(Remainder Divisor) X 2 - Divisor
This value is created from restoring the Rem ainder by adding the Divisor, shifting
the sum left, and then subtracting the Divisor. Simplifying the result we get
+ +
Rem ainder X2 Divisor X2 - Divisor = Remainder X2 Divisor
Based on this observation, write a nonrestoring division algorithm using the nota 
tion of Figure 3.11 that does not add the Divisor to the Remainder in step 3b.
Show that your algorithm works by dividing 0000 1011 by 00 1l .
two two