2.7 Supporting Procedures In Computer Hardware 89
MIPS operands
Name Example Comments
$sO-$s7, $tO $19, Fast locations for data. In MIPS, data must be in registers to perfonn arithmetic. MIPS
32 registers $zero. $aO- $a3. $vO- $vl. register $ze ro always equals O. $gp (28) is the global pointer, $sp (29) is the stack
$gp. Up. $sp. $ra pointer, $fp (30) is the frame pointer, and $ra (31) is the retum address.
Memory[O), Accessed only by data transfer instructions. MIPS uses byte addresses, so sequential
30
2 memory words Memory[4), ... , word addresses differ by 4. Memory holds data structures, arrays, and spilled registers,
Memory[4294967292] such as those saved on procedure calls.
MIPS assembly language
Category Instruction Example Meaning Comments
odd add $s1.$s2.$s3 $" - $s2 + $,3 three register operands
Arithmetic
subtract sub$s1.$s2.$s3 $, 1 $,1 $,3 three register operands
load word lw $s1.100($s2) $,1 Memory[$s2 + 100] Data from memory to register
Data transfer
store word sw $s1.100($s2) Memory[$s2 + 100] - $" Data from register to memory
"0' $s1.$s2.$s3 $s l - $s2 &. $s3 three reg. operands; bit·by-bit AND
00'
I
oc $s1.$s2.$s3 $s l - $s2 $s3 three reg. operands; bit·by-bit OR
0'
ooc $s1.$s2.$s3 $s l - ($s21$s3) three reg. operands; bit·by-bit NOR
00'
Logical and immediate and1 $s1.$s2.100 $sl - $s2 &. 100 Bit·by-bit AND reg with constant
or immediate ori $s1.$s2.100 $sl - $s2 1 100 Bit·by-bit OR reg with constant
,"
«
shift left logical $s1.$s2.10 $sl - $s2 10 Shift left by constant
,,'
shift right logical $$sl.$s2.10 $s l - $s2» 10 Shift right by constant
branch on equal b.g $s1.$s2.L if($sl __ $s2)gotoL Equal test and branch
branch on not equal bo, $s1.$s2.L if($sl!- $s2)goto L Not equal test and branch
set on less than ,It $s1.$s2.$s3 if($s2 < $s3) $sl _1; Compare less than; used with beq,
Conditional branch
else $sl " 0 be,
set on less than ,It $s1.$s2.100 if($s2 < 100) $sl _1; Compare less than immediate; used
immediate else $sl " 0 with beq, bne
jump j l go t o l Jump to target address
Unconditional jump Jump regi ster J' $" go to $ra For procedure return
jump and link j a1 l $ra"PC + 4; gotoL For procedure call
FIGURE 2.19 MIPS architecture revealed through Section 2.7. Highlighted portions show MIPS assembly language structures intro 
duced in Section 2.7. The I-format, used for jump and jWlIp-and-link instructions, is explained in Section 2.9.